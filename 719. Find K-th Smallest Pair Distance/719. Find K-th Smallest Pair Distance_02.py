"""
Submission Result: Time Limit Exceeded 
Last executed input:
[221238,427286,829789,601893,358469,46342,598804,666075,725560,842824,261672,391778,964604,53621,533121,755551,807344,597092,774256,63098,948199,579547,3196,909877,95910,965027,411050,532303,362036,248585,389213,926908,139846,642116,527660,735487,787738,978186,545605,595011,705832,788214,407493,856161,947455,114342,459338,744156,179687,348085,724897,694016,170072,797188,194673,987604,748362,124575,101059,588749,515935,846183,783882,752572,984672,299643,474986,42219,914392,699717,862520,146910,156305,269341,268361,19009,292092,663200,349590,296229,194323,667426,751544,139621,339144,979848,895018,432652,524214,697568,946806,378351,536203,315145,567426,212742,871720,419529,340374,869276,865407,603396,609939,616585,590359,21031,813301,154998,592050,679203,535025,94441,193548,618901,170094,996902,981372,129574,272754,762181,746001,525671,398300,912121,682153,5904,473065,729188,727720,183096,851216,848578,908443,532556,369537,800932,713898,919800,350740,851358,734571,674194,624352,862486,254700,127824,705571,61267,335237,377466,124085,542898,263565,867445,570415,909045,947063,167541,113129,897668,402701,287017,87703,233079,67973,689618,433223,164387,627387,472038,97781,148808,263578,28836,226968,476149,778104,404041,300170,319580,355689,713032,92394,739268,614862,716425,260673,449432,607545,987946,243679,147202,111207,598535,676528,107358,372982,190321,217552,501122]
10000
"""

class Solution:
    # all pairs' distances smaller than d
    def findpair(self, hs, sd, nd):
        cnt = 0
        for i in range(sd, nd+1, 1):
            for key in hs.keys():
                if i == 0:
                    cnt += hs[key]*(hs[key]-1)/2
                else:
                    cnt += hs[key]*hs.get(key+i,0)
        return cnt
    
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        hs = defaultdict(int)
        n = len(nums)
        if n == 2:
            return abs(nums[0]-nums[1]) 
        
        for i in nums:
            hs[i] += 1

        # max distance
        dmax = max(hs.keys())-min(hs.keys())
        # last pair = max distance
        if k == n*(n-1)/2:
            return dmax
        
        cnt = 0
        # distance space
        ld = 0
        rd = dmax
        md = (ld+rd)//2
        cnt = self.findpair(hs, ld, md)
        while ld < rd:
            if cnt >= k:
                rd = md
                md = (ld+rd)//2
                cnt -= self.findpair(hs, md+1, rd)
            elif cnt < k:
                ld = md+1
                md = (ld+rd)//2
                cnt += self.findpair(hs, ld+1, md)
        return ld
            