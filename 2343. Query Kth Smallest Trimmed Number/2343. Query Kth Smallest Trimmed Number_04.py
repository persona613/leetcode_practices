"""
Submission Result: Time Limit Exceeded

["98939068121306683542434365880394565848819066154927774747793688276139352914968756833064899676400","55118799968256036695771201130823683355930159086587275528166117583071489185616338265842816188433","93133040202032854475274553536687002954935703631889225451529215123164018630608571983941101111305","81227269455260716682747623050546925908303670917555921439685051565609087717566444765958736393350","24722683137556174353108252686147111839417717847346942389652744872099496100279430296914446840338","64549304704532782862990936308045415023005139089597793993601075220653725124028083183767230011313","97519782770188908056211756165137743841014593709429906911784306423761125854865940356296436476244","80629831181279865201331577424342994391843466804692783319771022809780737527165012089658397908431","43644695890248366749834609284826821903090614284220894242423303861832192258643473681588252497697","12411069780875598881685752695467930476151644189674016194692387972774655952193675272059203827458","70983391622786815731539425822665339737073838494276647527516214353477950777949992730370052484970","93141382307313040252075235874970464173110565702679912578572026892471236382051738639879218015737","17695230175749906566066587248980116996243763778674290202658749974219444774697689440295549837158","24195571408653927939647666585628112523127798208118379115587318696902946641508728831340218783024","45045490948692530666836712105644912891207539169692920659249449094999797709847288259833217548632","32524373015572497692950683451722525105091640570600340798515600005346171860530338240053182754521","41745568219448724048810701091091788951158330210878458133292804282913084006845715408285460999591","07795641521491640129261329710839827370900417249432484980521242195185471713103709978940782129979","58503242498965293434617093648298249276671490654872052320675150317333811545926759603847715949344","34912108842753300283890185531236937246310877568335739530224435832371354633264854195216987336473","82514824518826671986295767287351842914483587818447060545529192389797019914189023146221741356755","18689369937994292754848811146508544339841262054681540070130456540918472313740917057620686220944","14546417441557083836342836028106109184871141853427177841786593481699935267856510450101680977930","90035057186393603212181461100097860533969980711668340568577226923776238657550888543786231072701","37954516893443962933877445728999072376672873352701176774473144605157622843930094068265168812756","35085614169959618831243426757553637651786181926287144335465823434824366163801127798324187553812","08133979567331163185148271528124678075016793951203513923203003343680559301129178307185375036090","71792090582148024171647256468780255622528777425686093002067918673295555946682367812281892025717","13247026423034057165553681223190677617776773368455840670750534066864764735614352472997294598264","51424225510956438842819852892377628640774966714918639765031667396601639797114122902304422356116","82249006462513618580955907857806452422094202503903954988188587999651442638664529506166458106812","21754208656201444533858964760343556724985367978213368489611041688822868760959414918117992648347","03599046922573949795852821856915824730732944321033093666474562014771976304731456625247855456511","64460804588111850664597393804999878109200763441941090580515694106413883115240244681724642390927","31776429968275317021507504247276845053809367119652127219704990896814876692763550120246919938515","84673330210146522192251207680763969648167823669033826768838292964643057877608622139715756216178","18901422688113779852904552166098461777826673648262354793145518466387507356694190658231890624151","45448319033023317335313424331990901172424993893866832298758002877345687458431167027438981939968","24338696303190670780703786690251215677957893407088730032601838331767626760743244808867864832978","11618427873983356069280338745356567050362268207563178774658148650071485006520833531525687140259","35347016605425087024028210244598377717767928585589567257908710524881396190704112854701906739877","89601125060321636766728976268334164712117528618031397087470503897186583577329089823418753178500","78553955431678327640666591375042628401362563865927595522597678485032036009041753979459099601477","51887057520369425482221620232139149263614903720079567615958936680673922074383805127798838133795","26118778842586704201920679563361228924416704881347841887732311066890323024414278617477035123653","05350126973566993775128633800846923488495663218457266271440354596235105992522236972974410633440","41185697787352695203503336045655645436695353374746360889437985672524261965943379868066827186344","45640698949851596085825221758109751187264938153573290097253563617082214330791115349963396246757","22321176249062719137885220698647409210903796930930838912616344344335034142063365618535621379356","41699407278702054992478385443554930538781134209294491705941679343116928839873825204209403902655","75067250994768134430387164259366923575540325854173974689046794326187378778843322121903101138222","47954416574084771531013134348323289950882389320236532959273710589791422589774036990322641891878","18592474347809280598603226427792453543904240397462652457015587765619509753771492222698804485421","67837857760841528392938366180495437432486240621346990691427393699036970609694990745985032022457","97350785053950133121634303340268081438383904968829653058228467727598353887773125115676835453774","79178035295932094227516379712364709754691840907193677566206484526429114448885680518452130303246","90830065278202478759153794126321600392962984440347027665184191895252894995493286922868310063167","73809760496900636236863496671986461900117449152790887153888704422614862820580646357620295024688","47174138746930639317795398172141675298450387562413444056961557049984693017118185285711816509196","18508065082739027605242520856133808555557317353257290424691681089372657862018959132482708374172","03812866693774350506744698347247690646535032515718283102997138437714141766922062475487665468018","11474769735636869216193004110142229939168234731006847942815315493041383659080982847786632796399","72249685992790030770682004570916610364212724254748994243405288075272278623673282547311160406630","22104735435392256630861691086303036506052933111381579217807885877429651900322804870953122616854","13786333555403216742831117323596488140738045218685580296110181728614219534275924707471683083224","98962332742906239931247256093667946544779286759805976806922112221209147612250609225274307473083","48491819532746223023619510908752875725373859224709197743706896921324227648439544542065771092465","37590078072889819703489962891360039592153344037363190101476961311585342846992147695836782703430","35341467564828452341025663265354960629257425117014953159886993821980904891085359515030938182176","23121078251820563108620066191473114610209717688539498992340904654690205641480184271191715381012","62922133566608423531643646794472825088317511681934865841006723562001814154304217458601369538298","12365995026143613415164981851890616693378997800160191563965539891060599939707514857647320699955","87033751845558523130555094606418453638280295271014630483691592631282079942798752232542196562512","67061346446102865578865914604307640109155227595225510355043564229602010746106241644814766771614","63120732790757599082255555395970088334076610915622028168184493536118056907836218200897222146540","66215179598324280240146673550306451215973904280599219403742210644836517046333540627897562429631","49734638168785673692675573712810616464943228166538778951715262808000880590395954102144241246475","00468940726606873572661937602721805585850481584982148645696077601826346593718803102749916963755","86323057439607133262000449187781939699608156888847569978337065887308060309626404432274223915092","94712800920870321602387631627586433068157777324470669051332228932432279896306288640111123081685","11734946550702218531435701264284023615476812020439067024571263046373764905044538640321350288279","80598143111964369806512308209993006294524166400305070562778083265286286055471028853098177718510","69172279741167590401325717324071461165786722708568675724328259635096334208842232152778180716282","96187334191496916459785075783637195793984469971056290955931865780991677986136988273378999631936","71584132851790574871807622108466107556231938277040300629067767789780789751635258006758916138850","79041635235667793315929793019977218195557159838181190569769133646865386878323987450589253908524","67477487517857428753923524153464904780564424957756431660185309312049291401328533686534153817067","65929866469147689859564499747182193479800416027724388918163419846655437031250324842043330974616","91112538652882407408984697722886029325428274593608243307263084071570414530346823604026326221101","01342076096526578936184523480164821608478071857027225179947929708832458297614900163208726181700","17799807393139436026325847995364204570912844340021791663924155745493962538380004730403566743263"]
[[50,85],[88,95],[71,45],[9,21],[85,94],[36,84],[38,24],[69,85],[15,25],[48,74],[90,85],[24,61],[16,58],[73,53],[39,27],[36,86],[65,37],[48,89],[36,74],[59,24],[37,76],[62,7],[77,51],[3,5],[7,3],[37,76],[76,40],[39,86],[1,95],[23,27],[83,4],[84,84],[16,78],[78,9],[32,53],[82,95],[50,55],[21,72],[53,93],[59,41],[40,77],[29,91],[47,34],[3,13],[51,14],[54,6],[36,11],[45,82],[68,85],[15,39],[19,63],[40,12],[32,77],[74,87],[76,46],[58,51],[75,24],[20,50],[20,58],[81,39],[17,89],[41,24],[57,68],[24,38],[3,90],[43,2],[42,48],[49,81],[72,35],[23,60],[87,16],[78,52],[58,90],[42,81],[79,3],[72,48],[60,11],[47,4],[54,75],[32,49],[24,79],[57,44],[76,86],[71,28],[2,22],[46,54],[60,6],[58,51],[82,21],[62,90],[72,2],[4,70],[73,38],[60,44]]
"""
class Solution:
    def countingsort(self, lst, t, d=10):
        counts = [0]*d
        for sr in lst:
            counts[int(sr[0][t])] += 1
            
        # starting indeices
        start = 0
        for i, c in enumerate(counts):
            counts[i] = start
            start += c
        
        # init new list for sort elements and elements' index
        elist = [0]*len(lst) # for elements 
        for n in lst:
            key = int(n[0][t])
            elist[counts[key]] = [n[0][:-1],n[1]]
            counts[key] += 1
            
        return elist
    
    def radixsort(self, nums, trim, k):
        # copy list
        new = [[n[-trim:],i] for i,n in enumerate(nums)]
        
        # digit place for sort
        for t in range(-1, -trim-1, -1):
            new = self.countingsort(new, -1)
            
        return new[k-1][1]
        
    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:
        res = []
        while queries:
            k, trim = queries.pop(0)                       
            res.append(self.radixsort(nums, trim, k))            
        return res
       
        