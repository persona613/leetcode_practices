"""
Submission Result: Time Limit Exceeded

["0785693942944062068227895380863214023435893324177498555801415397536368259588269126089752155","1873113279758618074570289762071300782190978773954803753884435222317884852154265345615315434","7570141334189036172964090464980072383324380495731418110587790627480910773802420741234103709","3575789039604970484707530390853788639170510353253211622798429071495076117718166302250051233","4827431073957278623683252895786549936026823943546449087402899224466780221401745030834399488","5424166644696014297556522938029004519106136655393305308964530558193523047498402495123965518","2504520129898065472790744681469956835226358112836787912775075733577325139403422055258149732","8110861213529802345891897721143116364906631302920065685301982171108255490471467050408312004","9838169012968383201005951265564680829299403995338038875308202479416750273754837130351009070","9198934233683664139823848870342044702540570543635221720045655364133042655373931935402528170","1726450074961312743297584214606514773628814989985758631523317753619730007789058530790720659","6827028992323793198833771686870361401604442953677176871125456721806139548196534894415508719","4317008308966811747992733897026763485905654132135528288524803751185889430226897890175871877","3817379900369193940914778158002611074258169472301095386457460226054208061488457513752852083","5470323148681903816966861828177740420111006692995172258353401845303194911335407289341224853","9486874610117924329628530818618522835164531340774004835792987525392457039582808653280711360","3098383361449520033418973986951874388860978129339775889783620681559595088604445452517385060","8333069871194177112108952400087865374021346313516885684009266106046150604773050570264754470","8503709530829968373837583762430263569837982351062991392955659911332386019514197324677404493","3289148093588088259873694429163477678929546326505098189510566079114136348094459370303746448","7336856508410619981002748031552229021148748656775472110963835713938602774963440896952990161","6053725439598078218334339607621475127746524450463993198432989292489215292630538236691407275","1123985229255924088744368267862724971133234126008503570243644614313793480308520285409987670","9375250759213206355897818655261505667896782594188184896955087075419773898026080943491023356","6527160840779167794303240051624233419598533031493588108720166606969978519360894984308296046","7167213455126265319066780295412059219599760287250184420109421861808018262048164346240591184","3472745311072519513009968413458615139530874754985761175842599948531301855483003573619664254","3037647861401457295233923299535046223001391782003041413852292156695650778386791313503243512","3719694192592931848494992109939823195122286143663840926168017332608093394043383143590526597","5903584158112070149876292507444533605685084500974900409911372225030477878843650501381940671","8627415583997424578585223485911018176791006259819523735359125009932201912935848213729963219","9099493601489723746670119158299863595131190624835853949934150986642971854733897294950643721","4673117800916532385380835783759426933852949563331789453329129761022782746687962830216657979","0830763464072650274320870767283474318706676975977828998513196624579003167724782597382054480","9790033384273483736831741570594135597382993478632962913404301258075275626972826359001532534","7393775197195664815805295537229539148257916941968634077299626527129591088983652327880775204","5015103378215563021453117487725663232470793186048143894435474175988649457859365909874814065","5536046269550133188333332822051925826193986581893978268941937042766033080498403286158001741","5936501636876520813825340103399613145834605409931498545409649958397721324571259559220833593","9330963580417469355916525667677011425875422509623808928935836969771214532610044241233167774","1651209376233387135544311344733621731790860760889977430996636866162522544671784786334431376","2086209824600095347333054549224010158428304166878970104501520632355935478171373092027971137","8114645788143606947328760343071342770922970535838936825582149390109704788326263570435849967","9871610311733118854119230074982029422761624305597803458986942825059346314326578146355926061","8035755363944316934761748559990365842840766447406576335358219827246926428332970403011636408","6115077140301922105764601399492684382824070383149601242250095900736995209556369501011426325","1633143568144514836423941136348959665237300029819082875882275268942831770735797516506125886","1215589301041082256706551368364292263338632681077141802912993841687372889499536664105167401","2603000664751953350520112030034428359141741491667862075512114743725794319922496143226541662","4050869802770027877683264294157056975280110947715300840775518509017207653251015891851639089","7742336358374888754550119855587867165738322281963689399455593203332802525574558035539742825","7698543204391372031256922751461446067400570854173395910079599586582058840109632812967299056","4221042174859010417749161218629643518731465328203914934595664338046790569528130780911388444","2751591532290807266661312745764655780488116599865499964025673276285432962359389902979299335","6444697405037761102541160287022168647237137440745038742091319147716168427160796670036270016","9987380317620482204074883000757421005679672875442422737427501751777783342611127607472595223","3199448273999384925764760969308885955166925383762203517895985828968575205009942382092655522","4488270314183045568484794910976893177990533612334156101551897019090770484116597878371733849","5009054751700071888659852734580226106825561652861542062791812121948483890207289803552995115","8377414578876799594983353772963882491646207473718848338983038873280909698640320087578342012","3616951228302212361447707515672645529980299630701950645757481207225638660043404037501679339","9354199393970372125179898631807348450861288653674729728048923603407549052460914824612531307","5662259576247501879428699953998587994852545301146307580492404086547217356580875223586503043","0060780896792246002626660244046257068676920797281086625597838933414221523709358560374343536","9444844229652569620815884674553755614395882001311736692815269817988866008111668567952359782","6905902908245455893790383411264563273107863504858170323787902308217208374289667652167719375","6998940966833501874889884295549051476194659398912370492778947493053462061606797824548779345","6068914203658000429093403032950694556409590712254169921201695214392205361914486768364925797","3195243034473028367746296286737256010256356981874297710763572959593656488547431763144789981","3076737263453968353810292844846487320911310351800175471716347581528277817422137773144343229","1143113226663103452057913587103091351349365587647578460502916819805025922140479355265610271","8284664944111666401774433217563624043008476730566015384856323580948143601797543544202357367","0537013016395901497768424302676858976986816551753008754904272668823564894108860618448570047","2118696339988070387712613408725952228789425675804868270022539243331783555492172473463015721","2594910380630606183240992431705300437770893903267963597691129460742593955617733156409134696","5618666602499796122114774263138245579128755943981724839938714494502437589064142970607083105","6240117162885081439556019573474440641479535928707982799755249353346093733027206881886066119","7217067973929326667772277535870083806288763303484083074147367460607100530442397128429776333","2397127557809458764443045085353975325217340670767070149126779734411761642228209889840882884","0668854401391633990983586900111007034344921584136384431838279144293424795812671985490916564","6641576003132758140427740139805253655958331853739617272753520644700072242378095211469912246","4041499106309643364800419267393420495805220742430158601600331286503985541733116233815507670","2332265462421974046862246190987724220517834912276669657484665401420831175285557329067946453","7480907725624919889605359055681535282471950489902957659600998221696316422945076342732782395","9129114740016102102856600339522010594178349415939376880250221504391241903455228884563258616","7923369684737469786523719000516752596318822258979215975627979583885643343990764669888729696","1139518909641704843213833080602280833429231787055725790464590470862522779284047672545561065","4262493838462279082484829295322126553235241223093760101156722462517913128410382922448245980","2617029384578024052038272822749708835311186844465581093709881481343751936961238317844684387","1388768042946042090819201966105275456308673180432215013808925760120235876155876857530414789","8182560073140987908576350198906639866471335488518760400503562323238317776212312558638616935","8488127352539399626893483085484582349252308762656958689552606384461005110862620251479516028","5185056777017947308968697881029248154412620238002548210155696412476161991718361492854710818","3563919196451192364036602548569037932751441364815017592025238684364988328338848324396562354"]
[[66,28],[43,82],[5,7],[84,63],[23,5],[39,90],[5,55],[36,84],[31,47],[61,79],[16,32],[11,34],[88,15],[91,15],[38,4],[16,40],[86,89],[64,35],[55,56],[23,62],[2,16],[89,50],[59,7],[61,28],[76,16],[27,56],[52,50],[42,68],[53,90],[80,37],[48,6],[80,79],[35,8],[28,74],[57,34],[73,31],[60,22],[89,1],[39,41],[26,55],[74,39],[35,86],[76,47],[18,68],[68,50],[23,12],[22,77],[33,11],[22,32],[58,12],[11,67],[37,18],[26,32],[45,28],[87,74],[61,60],[58,45],[10,72],[47,11],[33,81],[46,16],[92,17],[58,28],[7,71],[52,39],[88,23],[1,44],[21,10],[60,55],[89,48],[9,58],[78,23],[27,67],[86,62],[39,54],[75,3],[30,54],[75,29],[22,29],[2,4],[54,12],[66,40],[32,49],[31,28],[40,33],[70,3],[32,50],[84,39],[10,7],[48,19],[23,86]]
"""
class Solution:
    def countingsort(self, lst, lstid, t, d=10):
        counts = [0]*d
        for sr in lst:
            counts[int(sr[t])] += 1
            
        # starting indeices
        start = 0
        for i, c in enumerate(counts):
            counts[i] = start
            start += c
        
        # init 2 new list for sort elements and elements' index
        elist = [0]*len(lst) # for elements 
        dlist = [0]*len(lst) # for elements' index sort
        for n in zip(lst, lstid):
            key = int(n[0][t])
            elist[counts[key]] = n[0]
            dlist[counts[key]] = n[1]
            counts[key] += 1
            
        return elist, dlist
    
    def radixsort(self, nums, trim, k):
        # copy list
        new = [n for n in nums]
        # record origin nums indexs
        newid = [i for i in range(len(nums))]
        
        # digit place for sort
        for t in range(-1, -trim-1, -1):
            new, newid = self.countingsort(new, newid, t)
            
        return newid[k-1]
        
    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:
        res = []
        while queries:
            k, trim = queries.pop(0)                       
            res.append(self.radixsort(nums, trim, k))            
        return res
       
        