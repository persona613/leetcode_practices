"""
Submission Result: Time Limit Exceeded

["1682781151097558977471688899477595382283408134089814597762552511458955122332829213017888909210","8795659917745329461623829760748025084598936496168632735725646099055921777060667237829315558632","5762813267658285285609951320229944744224486523904934704650139962758593901325419774884750488324","9897514936473242984988946400762217067688213209651133297880385201238580688028515558640762039451","5667390468685268455520034004066717128460792362523602434366755454959425472901828442507484791002","6546473132651294962225022789228740035505997698582989984340219675933580036744144954435901382194","9759166117904367757623618010834431318619397778130219639230586540439443973509810655172131867429","9500471441464355541273924221004793338822385329930375869660256318100134787577415111176302594795","8136106508666078939947800826612286228461535679231374822065474893893585415498151115526367151573","1254795369443903131227239991051278039173235522301025891388833654902126861525411754679176577088","2618927287958733119772169191492219645201414887228496069314868682285198961707795033211696801725","9231086883248047600222115252590207182372183278820756091911062744339701382062451706957958637856","7325359773935689353406418535813488574729698022213828943172610957256884086930565003720374855609","3964145019502069333759492110679660971078515834473548981042425013740180421773711771389900757448","2439701579002462801618390322965925716478756077611735491050001866391113717171710425919058604048","8547753515210733499532837445566243796326237227074703522534902120755555095092538502699318512703","8974402649494984207828742534255953638359846407026637060102142302803410911263500333286446354825","7839911150261402385765172642467880633438370360561511171453922637648852572815172360295243538106","8219443016502312480826909148307298411379313515592372727823419090231461534847273565059315056733","3201986495737442997604797826060924990819868679737125563405739187190729129788333268456343713425","5051285873260099065060638084642247591518268967380451541738403492387179913139507235614468282133","7795975752960968213190765600826525211702168379025617897013589280533271808078282225379129938593","1497903334493508239556146238413280105626288280559408488884066384051637319418119811612607124425","3131339448324599171700762038651775895927881345089136246302766636317298198990386928525798504570","6629600885942447885702273318055302329019606789950924109754024184131980293059539406098047810152","4591205677417654373704945857314233791868684559575567492325149634656878938538306134392622604314","2642506268782631208481904568229765389772629625476857623075582000963010494869856202277368878050","2351143217764434307242195706946906401663144173347513791937041616528454052493434289395905724383","4530102473274417693884770775664728132710706751589021243716465423967158985572115316147715174689","9207700098629706242127046078944203120400461479264157040374750541497261202022579735019956525803","2160539796869551537503027494544463271975557065057256440280764641659738262153585349343084438949","6492263938474950796050351640156311851919866119025137625253102917661181792852211000107429080857","0240588862480392357252176435649979055856781022215358196214441637224271250749778206253897382863","9701610115838297596356092690757549781766457620581854371253920090696330793268035622502453117945","9254405871525117518535780971742936790225643811325121853481279742241787882791284533889801580475","1393343803300316552999138164697650508130430095347031102246072474204930317720032551458963596619","9926913582838679563751936327103628200435836934580792255473115402019360092284836345623794261722","4373475095304243997840320242665371243909760384516593131669935528042603588959215029648435505165","5273625561240089142359789918720527020546002057656831069219633711978380206664607953610493607698","2942388661339384835132887543724565557985330221554241823910545558811315034924826741875928996087","7308365982378955017018538372559513968985834898133604097392031973495950116439896911182814979168","1354157413152470276215082794226056926558785443193020853544381494181315172713053749757753510000","5689761871937247091604851713683861541110950878343221662493712117008753494705378260811132728194","1396761566187810550549558470161280055721587848790590581632967054611468662793714037201199182680","2537646794116866966239263521657180120955034862447389489360471315960046642543081385353199967820","0307834467899976889247379501632638851879476827854094582417905980183424335495467298319460549293","6113747374029349281932996364646759373080346728307096837290449775052468759371324670773913776806","2010586092869798506307944903964062615359001182822197540104257400503766998841290847602941529828","2622113245355920971963995095583839845909852978639014125150271245790213240739912709493278439310","0270669422197694413586659232108326352367827033439807448037640883123222439697961158805322991274","1086718318857524720562898831728698489484614863900524841146347290096564598804686772133925738883","9162217809433489369878146517087190884631387993979840660503193340535159889737059481780332425723","7483271261359814169411072059539767934864242994736556214746123482166279244532465663231628761415","9744556549339961761782436433723420770758622334464041303269459541864782194254034501474942570105","4745681521939416126681841122406112822922349264248694692110935427520430080422651175553802418999","3073541683256309158314562484971748166215561117848043448339947876982294516553564171812367432731","9364298484868080498364647396493715728161638678123359741900785562226835163513456687051543714017","0407594164129308963027533276673012607902361901569613439279382856037666939541287494722069206444","5037191974784331007884105357030749017058276412946743470577911467785449165177230274175897320353","1944905642501740770914889149845475514510762136911646183405017537874461375433381175162257119456","7884830972213955810568665352547828047821979763115988490488993714051330261814310149163385651775","9354777985460989139875936097087974200565156948117429737527866075866883559177050900778943323994","6925998562377076107610624043799764555794837222439483698064301809223282881194317105224738055459","8680266608553865404993243830835768175311232443642619466839375478177333451554185684249554150013","6729873882985437803948575647645123824581888306668799399361840167703234168027645953042916852961","7068258786313055222880495427612770797076597628868489169015750416557450725916839450046106284935","8960265776567362544045634988154711261127237019329254412367312542445641477495299133706233846951","8472667806289348593915551766797389174460345157016071835102164420301601991526950230444291722972","6515313646480925546818095371097007184055810166049663949353153573117955955147769514094624150308","2580816553725664713814243636889189463371269128292075750066680497331526871153599013889959089846","6662671299809958039173347151069039979624230173477627630793945707353598321787540623157355291957","6454448171377042063325627973496381318079494617554145872198480623371901505645828403993379470566","0849402856558725652018270116252784625774951043565348502882029514100943762952644618200429291345","8518397657583275086239528953440465623552823227529794006775078074917852311817884829637201940350","8948096276779079504935855155921188157300412327611902864683843468265442737330430430295191742711","7026006321704492800397136041152883484890100105903008837895336307712328810985995509792393440373","8255727949752467646949466075384995230193136531399088497292800115569177952709742240023615231795","4304804621173819200958549219437393398515794916081040052110058753818548978746959071653107775888","9983796910359556190179227200588404100681765868796249698194633101328267187133052390646386745847","0203960096277545563729084023329739355683266226828355233134758409853245641017995409278757131017","5777402779699894291802567120075286159898926074584466115365150253424334443126262820695180272610","4123879611988692095816846768372517991737795737133175293864640670163695101433112958346975851516","4701579768341174581568075159788208292373531835613687588566364158469636251718778709471600883550","2018589538703842890914125777141403093518834072906916539930740085367507097219019778333561309350","8032714773714247185890054854438045519434534895573267374394406610564793136591713583971819828671","8819802856069364099881989004210818271253390397433441304047260259873591764285384808201195652712","0693163793388447633813925456141328939247361358962171015342589377779729281334198211044962803078","4853043646620029843882499827121449306448335425251811095234161457702113080394743370832189058567","2850353607364613215158266290927906666327047405867705383857453787606581257383371933536425795432","8440942675020068529056355408444733976839401321919521229908079232437702952957862227273198663890","6422527119561347402060712660354111588394703591897497781825589303161437392631255844641838779435","9251744690278826031010632673457900178642310766399208304154024612647970788943634944886598251277","9198956635786136508957702323821531954798978487528525217964593998111514026026305672583374703998","8135436004614376990212582503145051035023812410848434933614533200627520501544065526885836493507"]
[[14,12],[60,15],[1,76],[85,55],[39,44],[74,43],[19,70],[49,83],[79,8],[10,54],[45,8],[1,49],[35,19],[54,81],[17,89],[16,67],[36,4],[86,25],[18,15],[48,1],[40,7],[47,40],[12,50],[36,23],[31,87],[92,84],[31,63],[30,88],[74,52],[89,63],[40,14],[37,50],[22,61],[69,60],[42,79],[67,58],[39,33],[14,57],[48,94],[81,61],[20,59],[75,38],[75,94],[28,29],[13,54],[69,60],[46,83],[76,9],[50,91],[60,3],[75,6],[42,38],[41,3],[4,86],[35,31],[19,50],[40,46],[79,66],[55,14],[21,90],[53,51],[5,4],[15,54],[19,2],[33,37],[78,32],[4,36],[87,89],[60,3],[24,64],[40,7],[8,91],[68,89],[88,73],[70,29],[63,83],[12,64],[52,68],[47,55],[58,12],[21,6],[18,85],[19,9],[59,1],[74,86],[91,49],[74,84],[63,12],[16,21],[20,15],[39,46],[22,8],[75,35]]
"""
class Solution:
    def countingsort(self, lst, p, d=10):
        counts = [0]*d
        for sr in lst:
            key = (sr[0] // p) % 10
            counts[key] += 1
            
        # starting indeices
        start = 0
        for i, c in enumerate(counts):
            counts[i] = start
            start += c
        
        # init new list for sort elements and elements' index
        elist = [0]*len(lst)  
        for n in lst:
            key = (n[0] // p) % 10
            elist[counts[key]] = n
            counts[key] += 1
            
        return elist
    
    def radixsort(self, nums, trim):
        # copy list
        new = [ [int(n[-trim:]),i] for i,n in enumerate(nums)]
        
        # digit place for sort, p is place_value
        for t in range(0, trim, 1):
            p = 10**t
            new = self.countingsort(new, p)
            
        return new
        
    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:
        res = []
        trimap = defaultdict(list)
        while queries:
            k, trim = queries.pop(0)
            if trim not in trimap:
                new = self.radixsort(nums, trim)
                trimap[trim] = new                
            res.append(trimap[trim][k-1][1])
        return res
       
        