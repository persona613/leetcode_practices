"""
Submission Result: Time Limit Exceeded

["77072794161574715074026305149725871739307709655996018730752821493123390346060572687383508353923","23542879804587664609355028980733337871551890610272747040778089189504616558314686946436533519350","03509989528299514679609236770836717072887559822545092346551060533395311567356306118588636851074","34706103188839733097987234621273669480669538532789175179690582000928647620716395633379727009427","29246343264476961607667781910996361843474530268771255644199381066515010342470634489594278184244","37272613625007544107620374338557124625104809128110430965714449161809247888539058848803303405229","76776253681969321773715707661808354375403299410922648158849101172815888298861650076189279516172","78534949608805371953895163034287244120493472725926245584632283864929800110194083706240554801869","87227071966653731505472806416546398301809519495508537592523607027116556657609335952486672984101","02241121468219507565409238601930783209457428081080724956848808143907990633405798876310164626321","85953301167376148910642272797694475903572700887435157708547492873044479158464141249497828136378","25299054258277255327022818249477290480834989144481122001116248934091071320880964251103147251662","29677145677158983550128257169627381381779517687160615647768235852085547149020346688742767084497","25704325757161275988720140636016337903938505888380510514670509542185301767439817333332918457476","38675020818846162498017208731161064882058059893653023577012083096636614282745452471977104444913","76732446370441238563549894577545539084929041768392050207270025415229806335697101299839807611364","93446846642108952986700747072572741653520344005672326054711066216890008021736072414924803766532","21230602542664512212981282976518177106857146738082425048395805919583860063805769938604253263933","32725829276937867299675252886983489092372607578030739277118455957130988016525724104059865398133","02839140797939895757481649237400761536426351223000459023004251247124857518213793165900729846155","45387944846789456107825318172146409783574566303242760981320512102225879274241374857702154799835","23990224704306283347206042304490454742378030045787538902599888352759519240372012423121298952759","23618109081680233393336716951962897132526076245133320722653721474119438813703575119999503054330","66103796289801256286577328271723250853532760153737942913525704531243574070280689131942198997802","26401244890494881231588022596107211111943918612368093255399534477991306021469368271340233520562","21358543963159600924691060310592451709864823614525634692354719055938648321538396629328202505582","38082468197428183227657434367331147826246558430235985656221869571482644034081680011810323335538","03749240184325224223466396243001509056595043179335849461825093872776501057876576207588361512377","90112892954393657476614947171964904645201933156473610613260976947146552001121654776725952269106","22612520159096182110419140893182385575292659137063868096884389384930908483838577435118556854775","61343357492254739293990832566482431088211345461466582336231959305095144125729941031591092877748","62329142384025280976881112546394849927641315861562585004275144388219520130156113851403008988027","18867695267970592441025957742129917247685497328651089867482280676864698262051224044880474201997","89181077030700185364514285498145105707625801862440824198783061380088220472496679790436499675222","90052513327822902940950428728714612406527998224674381743913657688433431640796137428682681207222","59107413385340984045909959978003239486322889726389219140470829253645590760796378799895806646716","77505304989474902235086985513833944747230101972381917378809295813099545297842000899488831352925","22546840056036183196255253282807129277474192592601523288620331875209855579466572267999968592004","25569067914805392307493551277398601154251099682238187128698657098698442582717551758786255569259","89728674918380714285365165658741096139548771703890823014967222252713078705264766718832970645948","49576498257085885358684315812570207462219934711292782834009211286049226593913350787576664353619","32790813961670622123015799070608568368102414270360403324443391056387905497070394740053349106204","51833625226412887677086333997507743107281464576551623699553638768888652087258416190052143987134","21658752663740900881913396623179861296882833797524510174802030483894367944231019278173663983460","40858440409083804740312975948632208032391215387744910354888338383743260270778791090091086537216","51505489823201825614608644308714583284831346766570913625872226932563707175551908187410370099598","76910796222195846273056834699822531927191177771328642007863235202642552839972010255666024492448","26112177290944056837705590790170619809856433731410392370380649237648777284020423341785980777357","37548016681984436673953898453067429923823629697956805744785527220639183325646004310823493222787","25442036878530940953030465720528396305275829199992317973607323599375535885017680960327569094596","71494485526445848881966916421355439191012466143983333265624084145771443967509859652971978546808","02445449178479702427279350556741891621775485945759163848666398024704911539763390366384943201399","13262297602393565105861447009322973523288272612787581897489786341763123786620620969845165330484","29936942210641465732802333608917875231050892604577262848695554424088797831065621422396197850154","39201825529423351052108615760761805615833372021033382081847846066789326081097586264299171834526","38048736755496061364022421753879928099296744753946267105028867205721185653846228624526639498535","14952384391690990109436872580418170583380859758053972565582694881466005833727190912907718936415","28167812369701262207702951364951829677582227657418139932351288123175833449040081117998532229294","50750806322328842266324104565219757951478130771130856025901438918663533886992596217631506198867","53250135397907789648329255414953321245684229809459558099531042196166432206401072579702952549216","72007353098720598318556430044876105873981094083725974212349068687932012821471683072338939038562","60237226436670690245075169893558188242725394446477591531276955885075447770346108278524333215002","64062983837720815807808371596576978142648389335730702928661965627929585112651038046423882870011","55065987795569487408244181951118385343073148282059403599832439585822233484685809448511438016014","38418000059933675675829726379759414790605257448337104528921499577196223645079343730995957569149","26279887778434790653217088149975560835026695233876443437190327651161978743319747426205063161013","35289976974727176336510309673972817561626521739092566824168109498278284087955487584614609751953","47929484787965722874160469845749117172148743097008291308278421566035846652878713809449174623630","84495193455575063660189489476609579446894546833143019871947408550237928474764021889604022521735","01686497837549332122095648559571494466906892261740605431222911682706548998976264376107207133603","35946675688893553190908109452987668901004513201227510645341555720386403935290697699828469064045","92790444360576366118235451818024487235621422896045803428241375741867466851259668854712743315166","81269394503889211388541541315131275974790062301378565978915743535052250664094238051631341926713","61223362382915700865732916974429918793277880340161957555239599668251055550011096077693019455162","79130774560872153356540564932604278322209161641032320227483002762224130077363245367343522169658","58353580678938290452518507978708033178473574482258450629310386514459135188719223252110899265671","81327805575053965066379193657599554175149328927877982700166198405408489205552009689665129644970","91691755579675304348898690751635740549906513078201671422046209949612600098620201214997779494890","18703894705165351356200885507708746205684806771441493524471997929414254806598549668388444036635","17419233988688813554101370631954979191522279166814966349393122481658366845472584717210176180382","56515611310006572935821347340175854864311104832635805110995808020591804422936216729014068789573","57416567054326827001329380033432835658983230276423273044530390266382525749800118599812291671843","75480324177024891152068445569773456105513676615873922202719210088576127323650770776824510221982","33050860785890598911844976661395508524841270331888935367999953884029942464237078027558819198721","50844770626785578943852602646916158234225160859771228347787096445869126493435337387530772397330","12041432770960947679300105293904982619499851116413301735571094436785643138196299669057962511348","48271310312178590524181820124857784826256325772495512803260141703803994611040176253003275613751","84739584418964375179214624872549421546788724776598213328172877497088955801276343334395592308734","52673239390526862212094163728316544839644692991280026656203477978640347835042700071129584456632","92618637496124428001754652076215225512655960124531255158639559229651052550476169501227826439460","28082862135147921821877618380441523065926843028479765419981845863391516956468520646827341690929"]
[[17,90],[57,3],[46,39],[47,90],[39,40],[15,17],[60,56],[62,1],[6,54],[87,79],[24,91],[8,84],[76,80],[6,14],[76,31],[37,91],[8,28],[6,15],[62,57],[90,83],[63,56],[39,48],[22,52],[79,37],[79,82],[26,9],[53,60],[32,81],[33,13],[12,92],[32,8],[4,63],[67,39],[5,20],[4,91],[68,8],[17,25],[41,30],[29,39],[90,21],[5,24],[2,76],[7,75],[58,54],[78,18],[34,53],[61,33],[79,1],[30,34],[35,61],[19,67],[13,81],[69,73],[48,11],[45,94],[64,40],[34,28],[22,66],[29,2],[64,95],[69,34],[58,43],[3,52],[89,44],[23,17],[90,50],[69,4],[2,93],[80,71],[7,26],[15,82],[50,10],[44,52],[16,85],[66,24],[91,13],[19,60],[47,49],[18,43],[73,41],[20,23],[50,57],[20,54],[12,73],[67,89],[62,62],[29,82],[44,87],[51,7],[29,67],[77,24],[4,22],[89,30]]
"""
class Solution:
    def countingsort(self, lst, t, d=10):
        counts = [0]*d
        for sr in lst:
            counts[int(sr[0][t])] += 1
            
        # starting indeices
        start = 0
        for i, c in enumerate(counts):
            counts[i] = start
            start += c
        
        # init new list for sort elements and elements' index
        elist = [0]*len(lst) # for elements 
        for n in lst:
            key = int(n[0][t])
            elist[counts[key]] = n
            counts[key] += 1
            
        return elist
    
    def radixsort(self, nums, trim, k):
        # copy list
        new = [[n,i] for i,n in enumerate(nums)]
        
        # digit place for sort
        for t in range(-1, -trim-1, -1):
            new = self.countingsort(new, t)
            
        return new[k-1][1]
        
    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:
        res = []
        while queries:
            k, trim = queries.pop(0)                       
            res.append(self.radixsort(nums, trim, k))            
        return res
       
        